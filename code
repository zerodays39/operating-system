#include<iostream>
#include<vector>
#include<algorithm>
#include<queue>
#include<windows.h>
#include<unistd.h>
#include<conio.h>

using namespace std; 
struct Process 
{ 
    int pid;  // Process ID 
    int bt;   // CPU Burst time required 
    int at;  	//arrival time
    int priority; // Priority of this process 
    
    void input()			//input function
    {
    	cout<<"ENTER PID =>";
    	cin>>pid;
    	cout<<" ENTER BRUST TIME =>";
    	cin>>bt;
    	cout<<"  ENTER ARRIVAL TIME =>";
    	cin>>at;
		cout<<"         ENTER PRIORITY =>";
    	cin>>priority;
    }
    void output()			//output function
    {
    	cout<<" \n         PID =>";
    	cout<<pid;
    	cout<<"\n   BRUST TIME =>";
    	cout<<bt;
		cout<<"\n ARRIVAL TIME =>";
    	cout<<at;
    	cout<<"\n 	  PRIORITY =>";
    	cout<<priority;
    }
}; 

bool CmpAt(Process p1 , Process p2) //sorting function on basis of arrival time
{
	return (p1.at<p2.at);
}
  int main()
  {

  	int n;
  	cout<<"ENTER NUMBER OF PROCESSES :";
  	cin>>n;
  	cout<<"\n";
  	struct Process p[n];
	
  	
for(int i=0;i<n;i++)
	{
		p[i].input();
		cout<<"\n";
	}
	sort(p , p+n , CmpAt);
	    getch();
	system("cls");
	
	cout<<"\n \n :::::AFTER SORTING:::::";
	
printf("\n\n Process   \t BurstTime \t arrival time \t priority \n ");
    for(int i=0;i<n;i++)
    {
        printf("\n %d \t\t %d \t\t %d \t\t %d ", p[i].pid,p[i].bt,p[i].at,p[i].priority);
    }
	
	
	
	int cur=0,temp[n]={0};


	for(int i=0;i<n;i++)
	{
		if(p[cur].at==0)
		{	
	
			for(int k=0 ; k<=p[i+1].at;k++)
			{	
				if(p[cur].bt > 0)
				{
				p[cur].bt=p[cur].bt-1;
				temp[cur]=temp[cur]+1;
				}
				else 
				{
					break;
				}
				
			}
		}
		else if(p[cur].priority=p[i+1].priority)
		{	
		for(int k=0;k<p[i+1].at;k++)
			{
				if(p[cur].bt > 0)
				{
				p[cur].bt=p[cur].bt-1;
				temp[cur]=temp[cur]+1;
				}
				else 
				{break;
				}
			}
		}
		else if(p[cur].priority<p[i+1].priority)
		{
			cur=i;
			for(int k=0;k<p[i+1].at;k++)
			{	
				if(p[cur].bt > 0)
				{
				p[cur].bt=p[cur].bt-1;
				temp[cur]=temp[cur]+1;
				}
				else 
				break;
			}
		}
		else if(i == n-1)
		{
			int h=p[i].bt;
			for(int k=0;k<h;k++)
			{	
				if(p[i].bt > 0)
				{
				p[i].bt=p[i].bt-1;
				temp[i]=temp[i]+1;
				}
				else 
				break;
			}
		}
	}
			    getch();
			system("cls");
			
				cout<<"Processing Your data in priority queue ";
	
			for(int i=0;i<3;i++)
				{
				    cout<<".";
				    sleep(1);
				}
	cout<<" \n \n \n AFTER COMING FROM PRIORITY QUEUE :";
	
	printf("\n\n Process   \t BurstTime \t arrival time \t priority \n ");
    for(int i=0;i<n;i++)
    {
        printf("\n %d \t\t %d \t\t %d \t\t %d ", p[i].pid,p[i].bt,p[i].at,p[i].priority);
    } 	
	
	cout<<"\n";
/*	for(int i=0;i<n;i++)
	{
		cout<<"|"<<temp[i]<<" | ";
	}*/
	
	bool l =true;
	int count =0;
	while(l= true)
	{
		for(int i=0;i<n;i++)
			{
				if(count<n)
				{
					if(p[i].bt==0)
					{
						count++;
					//	cout<<"here count is inc \n";
					}
					else if(temp[i]!= p[i].bt)
					{	
					//	cout<<"here count is dec \n";
						count--;
						//cout<<"IN WHILE---LOOP \n";
						if(p[i].bt>=2)
						{
						p[i].bt=p[i].bt-2;
						temp[i]=temp[i]+2;	
						}	
						else
						{
						p[i].bt=0;
						temp[i]=temp[i]+1;		
						}	
					}
				}
				else if(count == n)
				{
					break;
				}
			}
		if(count == n)
			{
				l=false;
				break;
			}
	}
	    getch();
		system("cls");
			
				cout<<"Processing Your data in ROUND ROBIN ";
	
			for(int i=0;i<3;i++)
				{
				    cout<<".";
				    sleep(1);
				}	
	cout<<"\n \n \n AFTER ROUND ROBIN :";
	printf("\n\n Process   \t BurstTime \t arrival time \t priority \n ");
	for(int i=0;i<n;i++)
    {
        printf("\n %d \t\t %d \t\t %d \t\t %d ", p[i].pid,p[i].bt,p[i].at,p[i].priority);
    } 
    cout<<"\n";
    getch();
    system("cls");
    int sum=0;
   		printf("\n\n Process   \t Waiting Time \t Turnaround Time \n ");
 for(int i=0;i<n;i++)
	{
		cout<<p[i].pid<<"\t\t"<<p[i].at+temp[i]<<"\t\t"<<p[i].at+temp[i]-2<<"\n";
	}   
	    getch();
}
